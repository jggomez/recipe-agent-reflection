import asyncio
from rich.console import Console
from langchain_google_vertexai import VertexAI
from typing import List

console = Console()


async def generate_text(
        prompt,
        system_message):
    """
    Generates text using a VertexAI language model.

    This function utilizes the VertexAI Gemini-1.5-flash model to generate text based on a provided prompt and system message. 
    The system message provides context and instructions to the model, influencing the generated text.

    Args:
        prompt (str): The input prompt for the language model.
        system_message (str): A message providing context and instructions to the model.

    Returns:
        str: The text generated by the language model based on the prompt and system message.
    """

    model = VertexAI(
        model_name="gemini-1.5-flash",
        system_message=system_message)
    result = model.invoke(prompt)
    console.print(result)
    return result


async def create_improve_recipe(
    ingredients: List[str],
    country: str,
    recipe_1: str,
    reflection: str,
) -> str:
    """
    Improves an initial recipe based on expert suggestions and constructive criticism.

    This function utilizes a language model to refine a recipe, taking into account feedback provided by an expert chef. 
    The model is instructed to act as a chef from the specified country, ensuring the improved recipe reflects the culinary 
    traditions and flavors of that region.

    Args:
        ingredients (List[str]): A list of food ingredients used in the recipe.
        country (str): The country from which the chef originates, influencing the recipe style and improvements.
        recipe_1 (str): The initial recipe to be improved.
        reflection (str): Constructive criticism and suggestions for improving the initial recipe.

    Returns:
        str: The improved recipe, incorporating the expert suggestions and addressing any identified issues.
    """

    system_message = f"""You are an expert cooking and the best chef. Create recipes with these food ingredients.\
                    You are from {country}
                    You will be provided with a recipe and your goal is to improve the recipe."""

    prompt = f"""
        Your task is to carefully read, then edit, a recipe from {country} with this ingredients {ingredients}, taking into
        account a list of expert suggestions and constructive criticisms.

        The recipe and the expert chef's suggestions are delimited by XML tags <RECIPE_TEXT></RECIPE_TEXT> and <EXPERT_SUGGESTIONS></EXPERT_SUGGESTIONS> \
        as follows:

        <RECIPE_TEXT>
        {recipe_1}
        </RECIPE_TEXT>

        <EXPERT_SUGGESTIONS>
        {reflection}
        </EXPERT_SUGGESTIONS>

        Please take into account the expert suggestions when editing the recipe. Edit the recipe by ensuring:

        (i) accuracy (Create a delicious and unique appetizer, main course, dessert that captures the essence of {country}'s cuisine.),\n\
        (ii) fluency (ensuring there are no unnecessary repetitions),\n\
        (ii) terminology (by ensuring terminology use is consistent and reflects the recipe domain.\n\
        (iv) local ingredients (Research what ingredients are commonly found in {country}'s cuisine.\n\
        (v) cooking techniques (Are there specific ways dishes are prepared in this country?) \n\
        (vi) flavors (Is the cuisine known for being spicy, savory, sweet, or something else entirely) \n\
        (vii) presentation (How is food typically presented in {country}) \n\

        Output only the new recipe and nothing else."""

    recipe_2 = await generate_text(prompt, system_message)

    return recipe_2


async def generate_reflection_recipe(
    ingredients: List[str],
    country: str,
    recipe_1: str,
) -> str:
    """
    Generates constructive criticism and suggestions for improving a provided recipe.

    This function utilizes a language model to analyze a recipe and provide feedback on its accuracy, fluency, terminology, 
    local ingredients, cooking techniques, flavors, and presentation. The model is instructed to act as an expert chef from the 
    specified country, ensuring the suggestions reflect the culinary traditions and flavors of that region.

    Args:
        ingredients (List[str]): A list of food ingredients used in the recipe.
        country (str): The country from which the chef originates, influencing the recipe style and suggestions.
        recipe_1 (str): The initial recipe to be analyzed and improved.

    Returns:
        str: A string containing constructive criticism and helpful suggestions for improving the provided recipe.
    """

    system_message = f"""You are an expert cooking and the best chef. Create recipes with these food ingredients.\
                    You are from {country}
                    You will be provided with a recipe and your goal is to improve the recipe."""

    reflection_prompt = f"""
        Your task is to carefully read a recipe from {country} with this ingredients {ingredients} and then give constructive criticism and helpful suggestions to improve the recipe. \
        The initial recipe, delimited by XML tags <RECIPE_TEXT></RECIPE_TEXT>, is as follows:

        <RECIPE_TEXT>
        {recipe_1}
        </RECIPE_TEXT>

        When writing suggestions, pay attention to whether there are ways to improve the recipe \n\
        (i) accuracy (Create a delicious and unique appetizer, main course, dessert that captures the essence of {country}'s cuisine.),\n\
        (ii) fluency (ensuring there are no unnecessary repetitions),\n\
        (iii) Style (Ensure alignment with the {country}'s culinary style),\n\
        (iv) feasibility of the recipe (availability of ingredients, cooking techniques).\n\
        (v) local ingredients (Research what ingredients are commonly found in {country}'s cuisine.\n\
        (vi) cooking techniques (Are there specific ways dishes are prepared in this country?) \n\
        (vii) flavors (Is the cuisine known for being spicy, savory, sweet, or something else entirely) \n\
        (viii) presentation (How is food typically presented in {country}) \n\

        Write a list of specific, helpful and constructive suggestions for improving the recipe.
        Each suggestion should address one specific part of the recipe.
        Output only the suggestions and nothing else.
        """

    reflection = await generate_text(
        reflection_prompt, system_message=system_message)
    return reflection


async def create_initial_recipe(
    ingredients: List[str],
    country: str,
) -> str:
    """
    Generates initial recipes based on provided ingredients and a specified country.

    This function utilizes a language model to create recipes using the given ingredients. 
    The model is instructed to act as an expert chef from the specified country, 
    ensuring the recipes reflect the culinary traditions and flavors of that region.

    Args:
        ingredients (List[str]): A list of food ingredients to be used in the recipes.
        country (str): The country from which the chef originates, influencing the recipe style.

    Returns:
        str: A string containing three recipes generated by the language model, 
             each utilizing the provided ingredients and reflecting the culinary style of the specified country.
    """

    system_message = f"You are an expert cooking and the best chef. Create recipes with these food ingredients.\
                    You are from {country}"

    prompt = f"""Create 1 recipes with these food ingredients:
            {ingredients}"""

    recipe = await generate_text(
        prompt, system_message=system_message)

    return recipe


async def create_recipe_with_reflection(
    ingredients: List[str],
    country: str = "Mexico",
):
    """
    Generates recipes based on provided ingredients and a specified country, incorporating reflection and improvement.

    This function orchestrates a multi-step process to create recipes:

    1. **Initial Recipe Generation:** Uses a language model to generate initial recipes based on the provided ingredients and specified country.
    2. **Reflection:**  Analyzes the initial recipes and provides constructive criticism and suggestions for improvement.
    3. **Recipe Improvement:**  Utilizes the reflection to refine the initial recipes, addressing any identified issues.

    Args:
        ingredients (List[str]): A list of food ingredients to be used in the recipes.
        country (str): The country from which the chef originates, influencing the recipe style. Defaults to "Mexico".

    Returns:
        str: The improved recipes based on the reflection and refinement process.
    """

    initial_recipe = await create_initial_recipe(
        ingredients,
        country,
    )

    reflection = await generate_reflection_recipe(
        ingredients,
        country,
        initial_recipe,)

    improve_recipe = await create_improve_recipe(
        ingredients,
        country,
        initial_recipe,
        reflection
    )

    return improve_recipe


async def main():
    await create_recipe_with_reflection(
        ["rice", "meat", "vegetables"],
        "Mexico",
    )


# Run the main function
asyncio.run(main())
